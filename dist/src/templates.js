"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.registerStandardHelpers = exports.registerPartial = exports.generateFromTemplate = exports.SEGMENT_AUTOGENERATED_FILE_WARNING = void 0;
const fs = __importStar(require("fs"));
const Handlebars = __importStar(require("handlebars"));
const util_1 = require("util");
const path_1 = require("path");
const readFile = util_1.promisify(fs.readFile);
/**
 * Header used to mark generated files that are safe to remove during generation.
 * This note needs to be in every generated file (except plan.json), otherwise
 * that file will not be cleaned up before client generation. This can be placed
 * anywhere in a file, though prefer placing it at the top of every file.
 *
 * If you change this, make sure to update the Build step to recognize previous
 * versions of this header when identifying files safe to remove.
 */
exports.SEGMENT_AUTOGENERATED_FILE_WARNING = 'This client was automatically generated by Segment Typewriter. ** Do Not Edit **';
// Renders a string generated from a template using the provided context.
// The template path is relative to the `src` directory.
function generateFromTemplate(templatePath, context, needsWarning) {
    return __awaiter(this, void 0, void 0, function* () {
        const path = path_1.resolve(__dirname, templatePath);
        const template = yield readFile(path, {
            encoding: 'utf-8',
        });
        const templater = Handlebars.compile(template, {
            noEscape: true,
        });
        const content = templater(context);
        if (needsWarning && !content.includes(exports.SEGMENT_AUTOGENERATED_FILE_WARNING)) {
            throw new Error(`This autogenerated file (${templatePath}) is missing a warning, and therefore will not be cleaned up in future runs.`);
        }
        return content;
    });
}
exports.generateFromTemplate = generateFromTemplate;
function registerPartial(partialPath, partialName) {
    return __awaiter(this, void 0, void 0, function* () {
        const path = path_1.resolve(__dirname, partialPath);
        const template = yield readFile(path, {
            encoding: 'utf-8',
        });
        const templater = Handlebars.compile(template, {
            noEscape: true,
        });
        Handlebars.registerPartial(partialName, templater);
    });
}
exports.registerPartial = registerPartial;
function registerStandardHelpers() {
    return __awaiter(this, void 0, void 0, function* () {
        // Register a helper for indenting multi-line output from other helpers.
        Handlebars.registerHelper('indent', (indentation, content) => {
            return content
                .split('\n')
                .join(`\n${indentation}`)
                .trim();
        });
        // Register a helper to output a warning that a given file was automatically
        // generated by Typewriter. Note that the exact phrasing is important, since
        // it is used to clear generated files. See `clearFolder` in `commands.ts`.
        Handlebars.registerHelper('autogeneratedFileWarning', () => {
            return exports.SEGMENT_AUTOGENERATED_FILE_WARNING;
        });
    });
}
exports.registerStandardHelpers = registerStandardHelpers;
//# sourceMappingURL=templates.js.map